<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>동적 폼 전송</title>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <!-- 아래 cdn은 axios 사용을 위한 것 -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <form name="register">
      <input type="text" name="id" placeholder="ID" value="lily" pattern="^[a-z0-9]{5,}$"/>
      <input type="password" name="pw" placeholder="password" value="1234" />
      <input type="text" name="name" placeholder="이름" value="lily" required />
      <div>
        <button type="button" onclick="ajaxGet()">ajax get 전송</button>
        <button type="button" onclick="ajaxPost()">ajax post 전송</button>
        <button type="button" onclick="axiosGet()">axios get 전송</button>
        <button type="button" onclick="axiosPost()">axios post 전송</button>
        <br/>
        <button type="button" onclick="fetchGet()">fetch get 전송</button>
        <button type="button" onclick="fetchPost()">fetch post 전송</button>
      </div>
      <!-- 아래 두 줄은 일발(동기) 폼 전송 할 때 type submit-->
      <!-- <input type="submit" /> -->
      <!-- <button type="submit">제출</button> -->
    </form>
    <h3 id="result"></h3>

    <script>
      function getData() {
        const form = document.forms["register"];//폼을 선택 한다.

        if(!form.checkValidity()){// checkValidity 폼의 유효성 검사를 해서 boolean값 반환
            form.reportValidity();//reportValidity:유효성 검사를 통과하지 못 한 input에 대해 
            return;//함수는 return을 만나면 다음을 읽지않는다.
        }
        //getData라는 함수의 반환값을 총 2가지 형태
        //false | object 객체형태

        const data = {
          id: form.id.value,
          pw: form.pw.value,
          name: form.name.value,
        }

        return data
      }

      function ajaxGet() {
        const form = document.forms["register"];
        // console.dir(form);
        // console.log(form.id);
        // console.log(form.id.value);

        const data = {
          id: form.id.value,
          pw: form.pw.value,
          name: form.name.value,
        }

        $.ajax({
          type: "GET", // 폼 속성 중 method
          url: "/ajax", // 폼 속성 중 action
          data: data,
          // url: `/ajax?id=${data.id}&pw=${data.pw}&name=${data.name}`,
          success: function(result) { // 응답을 성공적으로 받았을 경우에 대한 이벤트 핸들러
            // 매개변수(result)에 응답이 들어옴
            console.log(result);
            const {
              name
            } = result;
            $("#result").html(`ajax get 요청 성공 ${name}님 환영합니다.`)
          }
        })
      }

      function ajaxPost() {
        const data = getData();

        $.ajax({
          type: "POST",
          url: "/ajax",
          data: data,
          success: function(result) {
            console.log(result);
            $("#result").html(`ajax post 요청 성공 ${result.name}님 환영합니다.`)
          }
        })
      }

      function axiosGet() {
        const data = getData()

        // axios 함수는 promise 객체를 return
        axios({
          method: "GET",
          url: "/axios",
          params: data // get 요청으로 데이터 보낼 때 params 사용
          // params 대신 url에 query를 직접 작성해도 됨
        }).then((res) => {
          // 서버에서 보내준 응답이 res에 담김
          console.log("res", res)
          console.log("res.data", res.data)
          const {
            name
          } = res.data

          $("#result").html(`axios get 요청 성공 ${name}님 환영합니다.`)
        })
      }

      async function axiosPost() {

        //동적 폼 전송
        //폼 유효성 검사도 하고싶음
        //유효성 검사를 input 태그의pattern ,minlength ,required 이 속성은 form의 "submit"
        //form의 submit을 이용하는게 아님 
        //따라서 ,javascript 코드 내에서 유효성 검사를 하는 코드를 작성
        const data = getData();
        if(!data)return;//만약에 getData함수의 returm 값이false라면 동적 폼을 제출하지않고 함수를 끝낸다 ,
        const res = await axios({
          method: "POST",
          url: "/axios",
          data: data,
        })

        console.log("res", res)
        console.log("res.data", res.data)
        $("#result").html(`axios post 요청 성공 ${res.data.name}님 환영합니다.`)

        // axios({
        //   method: "POST",
        //   url: "/axios",
        //   data: data,
        // }).then((res) => {
        //   console.log(res.data)
        //   const {
        //     name
        //   } = res.data
        //   $("#result").html(`axios post 요청 성공 ${name}님 환영합니다.`)
        // })
      }
    function fetchGet(){
        const data= getData();
        if(!data) return;
        //fetch(url,option 객체)
        //fetch는 method가 GET이 가본값
        //fetch는 get요청 시 데이터를 query로 만들어서 url과 함께 전송
        // const urlQuery =`id=${data.id}&name=${data.name}&pw=${data.pw}`
        const urlQuery = new URLSearchParams(data).toString();
//---------------------------방법1--------------------------------
        // fetch(`/fetch?${urlQuery}`).then((res)=>{
        //     console.log("원본",res);
        //     // const data=res.json();
        //     // console.log(data);//Promise pending(undefinde)문제 발생(모르는 값이기때문에)
        //     return res.json()
        // }).then((res)=>{
        //     //위에서 파싱해서 return하고있기때문에.
        //     //이 함수의 res는 서버에서 여러분들이 응답한 객체
        //     console.log("파싱",res)
        // })

//---------------------------방법2(then -----------------------------
        // fetch(`/fetch?${urlQuery}`).then(async(res)=>{
        //     console.log("원본",res);
        //     console.log("파싱", await res.json());
        //     //응답을 파싱 해야함
        //     //.json

        // })
//------------------방법3---------------------


        // const oriRes = await fetch (`/fetch?${urlQuery}`)
        // const res = await oriRes.json();
        // console.log(res) 



    }



    
    function fetchPost(){
        const data=getData();
        if(!data) return;
        //원래는 content-type 기본값 사용 : application/x-www-form-url
        //하지만 fetch post요청시 기본값을 사용하면 정상적으로 작동하지않음
        //content-type 을 application/json형태로 변경
        fetch("/fetch",{
            method:"POST",
            headers : {
                "Content-Type":"application/json"
            },
            body: JSON.stringify(data) //data객체를 json형태로 변경하는 함수
        }).then((res)=>{
            return res.json()
        }).then((res)=>{
            console.log(res)
            $("#result").html(`fetchPost요청 성공${res.name}님 안녕하세요`)
        })
    }
    </script>
  </body>
</html>